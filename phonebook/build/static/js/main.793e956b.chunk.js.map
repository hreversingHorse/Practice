{"version":3,"sources":["component/PersonForm.js","component/Filter.js","component/Persons.js","services/dbhandling.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","_ref","addPerson","newName","handleNameChange","number","handleNumberChange","react_default","a","createElement","onSubmit","value","onChange","type","Filter","filter","handleFilterChange","Persons","generateNumbers","dbhandling","axios","get","then","response","data","newPerson","post","id","delete","BASE_URL","put","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNumber","_useState7","_useState8","setFilter","getPersons","dbService","useEffect","checkArray","entry","flag","forEach","person","name","component_Filter","event","target","component_PersonForm","preventDefault","window","confirm","personToChange","find","addedPerson","concat","component_Persons","toString","toLowerCase","includes","map","key","onClick","result","console","log","handleDeletePerson","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAiCeA,EA9BI,SAAAC,GACiB,IADfC,EACeD,EADfC,UAAWC,EACIF,EADJE,QAASC,EACLH,EADKG,iBACrCC,EAAgCJ,EAAhCI,OAAQC,EAAwBL,EAAxBK,mBAER,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUR,GACZK,EAAAC,EAAAC,cAAA,oBACMF,EAAAC,EAAAC,cAAA,SACNE,MAAOR,EACPS,SAAUR,KAGVG,EAAAC,EAAAC,cAAA,sBACQF,EAAAC,EAAAC,cAAA,SACRE,MAAON,EACPO,SAAUN,KAGVC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,WCLGC,EAfA,SAAAb,GAAkC,IAAhCc,EAAgCd,EAAhCc,OAAQC,EAAwBf,EAAxBe,mBACrB,OACIT,EAAAC,EAAAC,cAAA,gCACsBF,EAAAC,EAAAC,cAAA,SAClBE,MAAOI,EACPH,SAAUI,MCMPC,EAVC,SAAAhB,GAAuB,IAArBiB,EAAqBjB,EAArBiB,gBACd,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACKS,uBCoBFC,EAxBK,WAChB,OAAOC,IACFC,IAJQ,gBAKRC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAqBpBL,EAlBG,SAACM,GACf,OAAOL,IACFM,KAVQ,eAUMD,GACdH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAepBL,EAZM,SAACQ,GAClB,OAAOP,IACFQ,OAAOC,gBAAiBF,GACxBL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QASpBL,EANY,SAACQ,EAAIF,GAC5B,OAAOL,IACFU,IAAID,gBAAiBF,EAAGF,GACxBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QC0FpBO,EA3GH,WAAM,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACAI,EADAJ,EAAA,GAAAK,EAEcN,mBAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETpC,EAFSqC,EAAA,GAEAC,EAFAD,EAAA,GAAAE,EAGYT,mBAAS,IAHrBU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGTrC,EAHSsC,EAAA,GAGDC,EAHCD,EAAA,GAAAE,EAIYZ,mBAAS,IAJrBa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAIT9B,EAJS+B,EAAA,GAIDC,EAJCD,EAAA,GAMVE,EAAa,WACfC,IAAwB3B,KAAK,SAAAe,GAC3BC,EAAWD,MAIjBa,oBAAUF,EAAY,IAEtB,IAmEMG,EAAa,SAACC,GAClB,IAAIC,GAAO,EAMX,OALAhB,EAAQiB,QAAQ,SAACC,GACXA,EAAOC,OAASJ,EAAMI,OACxBH,GAAO,KAGJA,GAGT,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACgD,EAAD,CAAQ1C,OAAQA,EAAQC,mBA/CD,SAAC0C,GAC1BX,EAAUW,EAAMC,OAAOhD,UA+CrBJ,EAAAC,EAAAC,cAACmD,EAAD,CACA1D,UAlFc,SAACwD,GACjBA,EAAMG,iBACN,IAAMpC,EAAY,CAChB+B,KAAMrD,EACNE,OAAQA,GAIV,IAAoB,IAFF8C,EAAW1B,IAM3B,IAAe,IAHAqC,OAAOC,QACpB5D,EAAU,6EAEQ,CAClB,IAAM6D,EAAiB3B,EAAQ4B,KAAK,SAAAV,GAAM,OAAIA,EAAOC,OAASrD,IAC9D8C,EAA6Be,EAAerC,GAAIF,GAAWH,KAAK,SAAAC,GAC9DyB,YAIJC,EAAoBxB,GAAWH,KAAK,SAAA4C,GAClC5B,EAAWD,EAAQ8B,OAAOD,OA+D5B/D,QAASA,EACTC,iBA3DqB,SAACsD,GACxBjB,EAAWiB,EAAMC,OAAOhD,QA2DtBN,OAAQA,EACRC,mBAzDuB,SAACoD,GAC1Bd,EAAUc,EAAMC,OAAOhD,UAyDrBJ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC2D,EAAD,CAASlD,gBAlCW,WACtB,OACEmB,EAAQtB,OAAO,SAACwC,GACd,OAAuF,IAAnFA,EAAOC,KAAKa,WAAWC,cAAcC,SAASxD,EAAOsD,WAAWC,iBAKnEE,IAAI,SAAAjB,GAAM,OAAIhD,EAAAC,EAAAC,cAAA,MAAIgE,IAAKlB,EAAO5B,IAAK4B,EAAOC,KAA5B,KAAoCD,EAAOlD,OAA3C,IAAmDE,EAAAC,EAAAC,cAAA,UAAQiE,QAAS,kBAzB9D,SAAC/C,EAAI6B,GAC9B,IAAMmB,EAASb,OAAOC,QAAQ,0BAA4BpC,EAAK,IAAM6B,GACrEoB,QAAQC,IAAIF,GACPA,IAGH1B,EAAuBtB,GACvBW,EAAWD,EAAQtB,OAAO,SAAAwC,GACxB,OAAIA,EAAOC,OAASA,MAiBqEsB,CAAmBvB,EAAO5B,GAAI4B,EAAOC,QAA5D,kBCvEtDuB,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.793e956b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst PersonForm = ({addPerson, newName, handleNameChange, \n    number, handleNumberChange}) => {\n\n    return (\n    <div>\n        <form onSubmit={addPerson}>\n            <div>\n            name: <input\n            value={newName}\n            onChange={handleNameChange}\n            />\n            </div>\n            <div>\n            number: <input\n            value={number}\n            onChange={handleNumberChange}\n            />\n            </div>\n            <div>\n            <button type='submit'>add</button>\n            </div>\n        </form>\n    </div>\n    );\n};\n\nPersonForm.propTypes = {\n    \n};\n\nexport default PersonForm;","import React from 'react';\n\nconst Filter = ({filter, handleFilterChange}) => {\n    return (\n        <div>\n            filter shown with <input\n            value={filter}\n            onChange={handleFilterChange}\n        />\n        </div>\n    );\n};\n\nFilter.propTypes = {\n    \n};\n\nexport default Filter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Persons = ({generateNumbers}) => {\n    return (\n        <div>\n            <ul>\n                {generateNumbers()}\n            </ul>\n        </div>\n    );\n};\n\nexport default Persons;","import axios from'axios'\nconst BASE_URL = '/api/persons'\n\nconst loadPersons = () => {\n    return axios\n        .get(BASE_URL)\n        .then(response => response.data)\n}\n\nconst addPerson = (newPerson) => {\n    return axios\n        .post(BASE_URL,newPerson)\n        .then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n    return axios\n        .delete(BASE_URL + '/' + id)\n        .then(response => response.data)\n}\n\nconst changePersonNumber = (id, newPerson) => {\n    return axios\n        .put(BASE_URL + '/' + id,newPerson)\n        .then(response => response.data)\n}\n\nexport default {\n    loadPersons,\n    addPerson,\n    deletePerson,\n    changePersonNumber\n}\n\n\n\n\n","import React, {useState, useEffect} from 'react';\nimport PersonForm from './component/PersonForm';\nimport Filter from './component/Filter';\nimport Persons from './component/Persons';\nimport axios from 'axios';\nimport dbService from './services/dbhandling'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [number, setNumber] = useState('')\n  const [filter, setFilter] = useState('')\n\n  const getPersons = () => {\n      dbService.loadPersons().then(persons => {\n        setPersons(persons)\n      })\n    }\n\n  useEffect(getPersons, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: number\n    }\n    let checkForDup = checkArray(newPerson)\n\n    if (checkForDup === true) {\n      const result = window.confirm(\n        newName + ' is already in the phonebook. Do You want to replace his current number ?'\n      )\n      if (result === true){\n        const personToChange = persons.find(person => person.name === newName)\n        dbService.changePersonNumber(personToChange.id, newPerson).then(response => {\n          getPersons()\n        })\n      }\n    } else {\n      dbService.addPerson(newPerson).then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n      })\n    }\n  }\n\n  const handleNameChange = (event) =>{\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleDeletePerson = (id, name) => {\n    const result = window.confirm('are you sure to delete ' + id + \" \" + name)\n    console.log(result)\n    if (!result){\n      //do nothing\n    }else {\n      dbService.deletePerson(id)\n      setPersons(persons.filter(person => {\n        if (person.name === name){\n          return false\n        }else {\n          return true\n        }\n      }))\n    }\n  }\n\n  const generateNumbers = () => {\n    return (\n      persons.filter((person) => {\n        if (person.name.toString().toLowerCase().includes(filter.toString().toLowerCase()) === true){\n          return true\n        } else {\n          return false\n        }\n      }).map(person => <li key={person.id}>{person.name}, {person.number} <button onClick={() => handleDeletePerson(person.id, person.name)}>delete</button></li>)\n    )\n  }\n\n\n  const checkArray = (entry) => {\n    let flag = false;\n    persons.forEach((person) => {\n      if (person.name === entry.name){\n        flag = true\n      }\n    })\n    return flag\n  }\n\n  return (\n    <div>\n      <h2>PhoneBook</h2>\n      <Filter filter={filter} handleFilterChange={handleFilterChange}/>\n      <PersonForm \n      addPerson={addPerson} \n      newName={newName} \n      handleNameChange={handleNameChange}\n      number={number}\n      handleNumberChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n      <Persons generateNumbers={generateNumbers}/>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}